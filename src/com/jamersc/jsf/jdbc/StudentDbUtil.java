package com.jamersc.jsf.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class StudentDbUtil {
	
	private static StudentDbUtil instance;
	private DataSource dataSource;
	private String jndiName = "java:comp/env/jdbc/student_tracker";
	
	// get instance
	public static StudentDbUtil getInstance() throws Exception {
		
		if(instance == null) {
			
			instance = new StudentDbUtil();
			
		}
		return instance;
	}
	
	// initialized data source
	private StudentDbUtil() throws Exception {
		
		dataSource = getDataSource();
	
	}

	// get data source
	private DataSource getDataSource() throws NamingException {
		
		// This class is the starting context for performing naming operations
		InitialContext context = new InitialContext();
		
		// factory for connections to the physical data source that this DataSource object represents
		DataSource theDataSource = (DataSource) context.lookup(jndiName);
		
		return theDataSource;
		
	}

	// get Students
	public List<Student> getStudents() throws Exception {
		
		// create a list collection
		List<Student> students = new ArrayList<>();
		
		// connection (session) with a specific database
		Connection myConn = null; 
		 // object used for executing a static SQL statement and returning the results it produces.
		Statement myStmt = null;
		//A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
		ResultSet myRs = null;
		
		try {
			
			// Attempts to establish a connection with the data source that this DataSource object represents.
			myConn = dataSource.getConnection();
			
			// Create a SQL SELECT statement
			String sql = "SELECT * FROM student";
			
			//Creates a Statement object for sending SQL statements to the database.
			myStmt = myConn.createStatement();
			
			// Executes the given SQL statement, which returns a single ResultSet object.
			myRs = myStmt.executeQuery(sql);
			
			// get a result set
			while(myRs.next()) {
				int id = myRs.getInt("id");
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				
				//create a object to get students
				Student tempStudents = new Student(id, firstName, lastName, email);
				
				//array list add method
				students.add(tempStudents);
				
			}
			//return the array list "students" var;
			return students;
			
		} finally {
			// close the database connection
			close(myConn, myStmt, myRs);
		}

	}

	public void addStudent(Student theStudent) throws Exception {
		
		// A connection (session) with a specific database.
		Connection myConn = null;
		// An object that represents a precompiled SQL statement.
		PreparedStatement myStmt = null;
		
		try {
			
			// Attempts to establish a connection with the data source that this DataSource object represents.
			myConn = dataSource.getConnection();
			
			// Create a string variable SQL INSERT INTO statement
			String sql = "INSERT INTO student "
					+ "(first_name, last_name, email) "
					+ "VALUES (?, ?, ?)";
			
			// Creates a PreparedStatement object for sending parameterized SQL statements to the database.
			myStmt = myConn.prepareStatement(sql);
			
			// Sets the designated parameter to the given Java String value.
			myStmt.setString(1, theStudent.getFirstName());
			myStmt.setString(2, theStudent.getLastName());
			myStmt.setString(3, theStudent.getEmail());
			
			// Executes the SQL statement in this PreparedStatement object,
			myStmt.execute();
			
		} finally {
			close(myConn, myStmt, null);
		}
		
	}

	// fetch the row of selected student id
	public Student getStudent(int studentId) throws Exception {
		
		Connection myConn = null;
		// Prepared statement an object that represents a pre-compiled SQL statement.
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
		
		
		try {
			//connection
			myConn = dataSource.getConnection();
			
			//create query
			String sql = "SELECT * FROM student WHERE id=?";
			
			// Creates a PreparedStatement object for sending parameterized SQL statements to the database.
			myStmt = myConn.prepareStatement(sql);
			
			//Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database
			myStmt.setInt(1, studentId);
			
			// Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query
			myRs = myStmt.executeQuery();
			
			//create student object var
			Student theStudent = null;
			
			// get result set
			if(myRs.next()) {
				int id = myRs.getInt("id");
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				
				// new student object
				theStudent = new Student(id, firstName, lastName, email);
			
			} else {
				
				throw new Exception("Could not find the id: " + studentId);
			}
			
			return theStudent;
			
		} finally {
			close(myConn, myStmt, myRs);
		}
		

	}

	// update student
	public void updateStudent(Student theStudent) throws Exception {
		
		Connection myConn = null;
		PreparedStatement myStmt = null;
		
		try {
			
			myConn = dataSource.getConnection();
			
			String sql = "UPDATE student "
					   + "SET first_name=?, last_name=?, email=? "
					   + "WHERE id=?";
			
			myStmt = myConn.prepareStatement(sql);
			
			myStmt.setString(1, theStudent.getFirstName());
			myStmt.setString(2, theStudent.getLastName());
			myStmt.setString(3, theStudent.getEmail());
			myStmt.setInt(4, theStudent.getId());
			
			myStmt.execute();
			
			
			
		} finally {
			close(myConn, myStmt, null);
		}
	}
	
	// always check the parameter to avoid error
	public void deleteStudent(int studentId) throws Exception {
		
		Connection myConn = null;
		PreparedStatement myStmt = null;
		
		try {
			//get connection
			myConn = dataSource.getConnection();
			
			String sql = "DELETE FROM student WHERE id=?";
			
			myStmt = myConn.prepareStatement(sql);
			
			myStmt.setInt(1, studentId);
			
			myStmt.execute();
			
		} finally {
			//close database connection
			close(myConn, myStmt, null);
		}
		
	}
	
	//Close the Database connection
	private void close(Connection myConn, Statement myStmt, ResultSet myRs) {
		// TODO Auto-generated method stub
		try {
			if(myConn != null) {
				myConn.close();
			}
			
			if(myStmt != null) {
				myStmt.close();
			}
			
			if(myRs != null) {
				myRs.close();
			}
			
		} catch (Exception exc) {
			// TODO: handle exception
			exc.printStackTrace();
		}
		
	}

	public List<Student> searchStudents(String searchName) throws Exception {
		
		List<Student> students = new ArrayList<>();
		
		Connection myConn = null;
		PreparedStatement myStmt = null;
		ResultSet myRs = null;
		//int studentId;
		
		try {
			//get connection
			myConn = dataSource.getConnection();
			
			// condition statement
			if(searchName != null && searchName.trim().length() > 0) {
				
				// search specific name
				String sql = "SELECT * FROM student "
						+ "WHERE lower(first_name) LIKE ? OR "
						+ "lower(last_name) LIKE ?";
				
				myStmt = myConn.prepareStatement(sql);
				
				// SQL wildcard character %, which is used for pattern matching. By placing % before and after the search term
				String searchNameLike = "%" + searchName.toLowerCase() + "%";
				
				myStmt.setString(1, searchNameLike);
				myStmt.setString(2, searchNameLike);
				
			} else {
				
				// select all if no one found
				String sql = "SELECT * FROM student";
				
				myStmt = myConn.prepareStatement(sql);
				
			}
			// execute result set
			
			myRs = myStmt.executeQuery();
			
			// retrieving the search name info
			while(myRs.next()) {
				
				int id = myRs.getInt("id");
				String firstName = myRs.getString("first_name");
				String lastName = myRs.getString("last_name");
				String email = myRs.getString("email");
				
				Student tempStudent = new Student(id, firstName, lastName, email);
				
				// List.add Appends each object
				students.add(tempStudent);
			}
			
			//return the object in the list
			return students;
		
		} finally {
			
			close(myConn, myStmt, myRs);
			
		}
		
	}



}
